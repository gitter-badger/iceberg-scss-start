// Create CSS grid columns
@mixin create-grid-columns($class) {
    $col : '';
    @each $i in $width-columns {
       $col : #{'.col'}-#{$class}-#{$count},#{$col};
       $count : $count + 1;
    } 
    #{$col}{
      float: left;
    } $count : 1;
    @each $i in $width-columns {
        .col-#{$class}-#{$count}{
            width: $i;
        }
        $count : $count + 1;
    } $count : 1;
    @each $i in $width-columns {
        .col-#{$class}-pull-#{$count}{
            right: $i;
        }
        $count : $count + 1;
    } $count : 1;
    @each $i in $width-columns {
        .col-#{$class}-push-#{$count}{
            left: $i;
        }
        $count : $count + 1;
    } $count : 1;
    @each $i in $width-columns {
        .col-#{$class}-offset-#{$count}{
            margin-left: $i;
        }
        $count : $count + 1;
    } $count : 1;
}

// Default
@mixin opacity($opacity) {
    opacity: $opacity;
    filter: unquote("alpha(opacity=#{$opacity * 100})");
}

@mixin circle{
    @include border-radius(100%);
}
@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: #000000 ) {
    -webkit-box-shadow: $h $v $b $s $c;
    -moz-box-shadow: $h $v $b $s $c;
    box-shadow: $h $v $b $s $c;
}
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
 }
@mixin font-size($size) {
    font-size:$size;
    font-size: ($size / 16px) * 1rem;
}
@mixin gradient($start-color, $end-color, $orientation){
    background: $start-color;
    @if $orientation == vertical{
        // vertical
        background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
    }
    @else if $orientation == horizontal{
        // horizontal
        background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
        background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    }
    @else{
        // radial
        background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
        background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
        background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
        background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
    }
 }